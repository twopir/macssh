/**************** BEGIN GUSI CONFIGURATION ****************************
 *
 * GUSI Configuration section generated by GUSI Configurator
 * last modified: Sat Jul 15 19:32:39 2000
 *
 * This section will be overwritten by the next run of Configurator.
 */

#define GUSI_SOURCE
#include <GUSIConfig.h>
#include <sys/cdefs.h>

/* Declarations of Socket Factories */

__BEGIN_DECLS
void GUSIwithInetSockets();
void GUSIwithLocalSockets();
void GUSIwithMTInetSockets();
void GUSIwithMTTcpSockets();
void GUSIwithMTUdpSockets();
void GUSIwithOTInetSockets();
void GUSIwithOTTcpSockets();
void GUSIwithOTUdpSockets();
void GUSIwithPPCSockets();
void GUSISetupFactories();
__END_DECLS

/* Configure Socket Factories */

void GUSISetupFactories()
{
	static Boolean sOTTested = false;
	static Boolean sOTPresent = false;

#ifdef GUSISetupFactories_BeginHook
	GUSISetupFactories_BeginHook
#endif
	/* we'll use OpenTransport if it's at least version 1.1.1 */
	if ( !sOTTested ) {
		long result;
		NumVersion version;
		if ( Gestalt(gestaltOpenTpt, &result) == noErr ) {
			OSErr theErr = Gestalt(gestaltOpenTptVersions, (long*)&version);
			if (theErr == noErr && (version.majorRev >= 2 || version.minorAndBugRev >= 0x11)) {
				sOTPresent = true;
			}
		}
		sOTTested = true;
	}
	if ( sOTPresent ) {
		/*GUSIwithOTInetSockets();*/
		GUSIwithOTTcpSockets();
	} else {
		/*GUSIwithMTInetSockets();*/
		GUSIwithMTTcpSockets();
	}
#ifdef GUSISetupFactories_EndHook
	GUSISetupFactories_EndHook
#endif
}

/* Declarations of File Devices */

__BEGIN_DECLS
void GUSIwithDConSockets();
void GUSIwithNullSockets();
void GUSIwithTTYSockets();
void GUSISetupDevices();
__END_DECLS

/* Configure File Devices */

void GUSISetupDevices()
{
#ifdef GUSISetupDevices_BeginHook
	GUSISetupDevices_BeginHook
#endif
	GUSIwithNullSockets();
	GUSIwithTTYSockets();
#ifdef GUSISetupDevices_EndHook
	GUSISetupDevices_EndHook
#endif
}

#ifndef __cplusplus
#error GUSISetupConfig() needs to be written in C++
#endif

GUSIConfiguration::FileSuffix	sSuffices[] = {
	"", '????', '????'
};

extern "C" void GUSISetupConfig()
{
	GUSIConfiguration * config =
		GUSIConfiguration::CreateInstance(GUSIConfiguration::kNoResource);

	config->ConfigureDefaultTypeCreator('TEXT', 'CWIE');
	config->ConfigureSuffices(
		sizeof(sSuffices)/sizeof(GUSIConfiguration::FileSuffix)-1, sSuffices);
	config->ConfigureSharedOpen(true);
}

/**************** END GUSI CONFIGURATION *************************/
