This is nettle.info, produced by makeinfo version 4.0 from
nettle.texinfo.

INFO-DIR-SECTION GNU Libraries
START-INFO-DIR-ENTRY
* Nettle: (nettle).           A low-level cryptographics library.
END-INFO-DIR-ENTRY

   Draft manual for the Nettle library. This manual corresponds to
version 0.2.

   Copyright 2001 Niels Möller

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "Copying" and "GNU General Public License"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: nettle.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)



   This document describes the nettle low-level cryptographic library.
You can use the library directly from your C-programs, or (recommended)
write or use an object-oriented wrapper for your favourite language or
application.

   This manual coresponds to version 0.2 of the library.

* Menu:

* Introduction::
* Copyright::
* Conventions::
* Example::
* Reference::
* Installation::
* Index::


File: nettle.info,  Node: Introduction,  Next: Copyright,  Prev: Top,  Up: Top

Introduction
************

   Nettle is a cryptographic library that is designed to fit easily in
more or less any context: In crypto toolkits for object-oriented
languages (C++, Python, Pike, ...), in applications like LSH or GNUPG,
or even in kernel space. In most contexts, you need more than the basic
cryptographic algorithms, you also need some way to keep track of
available algorithms, their properties and variants. You often have
some algorithm selection process, often dictated by a protocol you want
to implement.

   And as the requirements of applications differ on subtle and not so
subtle ways, an API that fits one application well can be a pain to use
in a different context. And that is why there are so many different
cryptographic libraries around.

   Nettle tries to avoid this problem by doing one thing, the low-level
crypto stuff, and providing a _simple_ but general interface to it.  In
particular, Nettle doesn't do algorithm selection. It doesn't do memory
allocation. It doesn't do any I/O.

   The idea is that one can build several application and context
specific interfaces on top of Nettle, and share the code, testcases,
banchmarks, documentation, etc. For this first version, the only
application using Nettle is LSH, and it uses an object-oriented
abstraction on top of the library.


File: nettle.info,  Node: Copyright,  Next: Conventions,  Prev: Introduction,  Up: Top

Copyright
*********

   Nettle is distributed under the GNU General Public License (see the
file COPYING for details). However, many of the individual files are
dual licensed under less restrictive licenses like the GNU Lesser
General Public License, or public domain. Consult the headers in each
file for details.

   It is conceivable that future versions will use the LGPL rather than
the GPL, mail me if you have questions or suggestions.

   A list of the supported algorithms, their origins and licenses:

_AES_
     The implementation of the AES cipher (also known as rijndael) is
     written by Rafael Sevilla. Released under the LGPL.

_ARCFOUR_
     The implementation of the ARCFOUR (also known as RC4) cipher is
     written by Niels Möller. Released under the LGPL.

_BLOWFISH_
     The implementation of the BLOWFISH cipher is written by Werner
     Koch, copyright owned by the Free Software Foundation. Also hacked
     by Ray Dassen and Niels Möller. Released under the GPL.

_CAST128_
     The implementation of the CAST128 cipher is written by Steve Reid.
     Released into the public domain.

_DES_
     The implementation of the DES cipher is written by Dana L. How, and
     released under the LGPL.

_MD5_
     The implementation of the MD5 message digest is written by Colin
     Plumb.  It has been hacked some more by Andrew Kuchling and Niels
     Möller.  Released into the public domain.

_SERPENT_
     The implementation of the SERPENT cipher is written by Ross
     Anderson, Eli Biham, and Lars Knudsen, adapted to LSH by Rafael
     Sevilla, and to Nettle by Niels Möller.

_SHA1_
     The implementation of the SHA1 message digest is written by Peter
     Gutmann, and hacked some more by Andrew Kuchling and Niels Möller.
     Released into the public domain.

_TWOFISH_
     The implementation of the TWOFISH cipher is written by Ruud de
     Rooij.  Released under the LGPL.


File: nettle.info,  Node: Conventions,  Next: Example,  Prev: Copyright,  Up: Top

Conventions
***********

   For each supported algorithm, there is an include file that defines a
_context struct_, a few constants, and declares functions for operating
on the state. The context struct encapsulates all information needed by
the algorithm, and it can be copied or moved in memory with no
unexpected effects.

   The functions for similar algorithms are similar, but there are some
differences, for instance reflecting if the key setup or encryption
function differ for encryption and encryption, and whether or not key
setup can fail. There are also differences that doesn't show in function
prototypes, but which the application must nevertheless be aware of.
There is no difference between stream ciphers and block ciphers,
although they should be used quite differently by the application.

   If your application uses more than one algorithm, you should probably
create an interface that is tailor-made for your needs, and then write a
few lines of glue code on top of Nettle.

   By convention, for an algorithm named `foo', the struct tag for the
context struct is `foo_ctx', constants and functions uses prefixes like
`FOO_BLOCK_SIZE' (a constant) and `foo_set_key' (a function).

   In all functions, strings are represented with an explicit length, of
type `unsigned', and a pointer of type `uint8_t *' or a `const uint8_t
*'. For functions that transform one string to another, the argument
order is length, destination pointer and source pointer. Source and
destination areas are of the same length. Source and destination may be
the same, so that you can process strings in place, but they must not
overlap in any other way.


File: nettle.info,  Node: Example,  Next: Reference,  Prev: Conventions,  Up: Top

Example
*******

   A simple example program that reads a file from standard in and
writes its SHA1 checksum on stdout should give the flavour of Nettle.

     /* FIXME: This code is untested. */
     #include <stdio.h>
     #include <stdlib.h>
     
     #include <nettle/sha1.h>
     
     #define BUF_SIZE 1000
     
     static void
     display_hex(unsigned length, uint8_t *data)
     {
       static const char digits[16] = "0123456789abcdef";
       unsigned i;
     
       for (i = 0; i<length; i++)
       {
         uint8_t byte = data[i];
         printf("%c%c ", digits[(byte / 16) & 0xf], digits[byte & 0xf]);
       }
     }
     
     int
     main(int argc, char **argv)
     {
       struct sha1_ctx ctx;
       uint8_t buffer[BUF_SIZE];
       uint8_t digest[SHA1_DIGEST_SIZE];
     
       sha1_init(&ctx);
       for (;;)
       {
         int done = fread(buffer, 1, sizeof(buffer), stdin);
         if (done <= 0)
           break;
         sha1_update(&ctx, done, buf);
       }
       if (ferror(stdin))
         return EXIT_FAILURE;
     
       sha1_finish(&ctx);
       sha1_digest(&ctx, SHA1_DIGEST_SIZE, digest);
     
       display_hex(SHA1_DIGEST_SIZE, digest);
       return EXIT_SUCCESS;
     }


File: nettle.info,  Node: Reference,  Next: Installation,  Prev: Example,  Up: Top

Reference
*********

   This chapter describes all the Nettle functions, grouped by family.

* Menu:

* Hash functions::
* Cipher functions::
* Miscellaneous functions::


File: nettle.info,  Node: Hash functions,  Next: Cipher functions,  Prev: Reference,  Up: Reference

Hash functions
==============

   A cryptographic "hash function" is a function that takes variable
size strings, and maps them to strings of fixed, short, length. There
are naturally lots of collisions, as there are more possible 1MB files
than 20 byte strings. But the function is constructed such that is hard
to find the collisions. More precisely, a cryptographic hash function
`H' should have the following properties:

_One-way_
     Given a hash value `H(x)' it is hard to find a string `x' that
     hashes to that value.

_Collision-resistant_
     It is hard to find two different strings, `x' and `y', such that
     `H(x)' = `H(y)'.

   Hash functions are useful as building blocks for digital signatures,
message authentication codes, pseudo random generators, associating
unique id:s to documents, and many other things.

MD5
---

   MD5 is a message digest function constructed by Ronald Rivest, and
described in `RFC 1321'. It outputs message digests of 128 bits, or 16
octets. Nettle defines MD5 in `<nettle/md5.h>'.

 - Context struct: struct md5_ctx

 - Constant: MD5_DIGEST_SIZE
     The size of an MD5 digest, i.e. 16.

 - Constant: MD5_DATA_SIZE
     The internal block size of MD5. Useful for some special
     constructions, in particular HMAC-MD5.

 - Function: void md5_init (struct md5_ctx *CTX)
     Initialize the MD5 state.

 - Function: void md5_update (struct md5_ctx *CTX, unsigned LENGTH,
          const uint8_t *DATA)
     Hash some more data.

 - Function: void md5_final (struct md5_ctx *CTX)
     Performs final processing that is needed after all input data has
     been processed with `md5_update'.

 - Function: void md5_digest (struct md5_ctx *CTX, unsigned LENGTH,
          uint8_t *DIGEST)
     Extracts the digest, writing it to DIGEST. LENGTH may be smaller
     than `MD5_DIGEST_SIZE', in which case only the first LENGTH octets
     of the digest are written.

     This functions doesn't change the state in any way.

   The normal way to use MD5 is to call the functions in order: First
`md5_init', then `md5_update' zero or more times, then `md5_final', and
at last `md5_digest' zero or more times.

   To start over, you can call `md5_init' at any time.

SHA1
----

   SHA1 is a hash function specified by "NIST" (The U.S. National
Institute for Standards and Technology. It outputs hash values of 160
bits, or 20 octets. Nettle defines SHA1 in `<nettle/sha1.h>'.

   The functions are analogous to the MD5 ones.

 - Context struct: struct sha1_ctx

 - Constant: SHA1_DIGEST_SIZE
     The size of an SHA1 digest, i.e. 20.

 - Constant: SHA1_DATA_SIZE
     The internal block size of SHA1. Useful for some special
     constructions, in particular HMAC-SHA1.

 - Function: void sha1_init (struct sha1_ctx *CTX)
     Initialize the SHA1 state.

 - Function: void sha1_update (struct sha1_ctx *CTX, unsigned LENGTH,
          const uint8_t *DATA)
     Hash some more data.

 - Function: void sha1_final (struct sha1_ctx *CTX)
     Performs final processing that is needed after all input data has
     been processed with `sha1_update'.

 - Function: void sha1_digest (struct sha1_ctx *CTX, unsigned LENGTH,
          uint8_t *DIGEST)
     Extracts the digest, writing it to DIGEST. LENGTH may be smaller
     than `SHA1_DIGEST_SIZE', in which case only the first LENGTH octets
     of the digest are written.

     This functions doesn't change the state in any way.


File: nettle.info,  Node: Cipher functions,  Next: Miscellaneous functions,  Prev: Hash functions,  Up: Reference

Cipher functions
================

   A "cipher" is a function that takes a message or "plaintext" and a
secret "key" and transforms it to a "ciphertext". Given only the
ciphertext, but not the key, it should be hard to find the cleartext.
Given matching pairs of plaintext and ciphertext, it should be hard to
find the key.

   To do this, you first initialize the cipher context for encryption or
decryption with a particular key, then use it to process plaintext och
ciphertext messages. The initialization is also called "key setup".
With Nettle, it is recommended to use each context struct for only one
direction, even if some of the ciphers use a single key setup function
that can be used for both encryption and decryption.

   There are two main classes of ciphers: Block ciphers and stream
ciphers.

   A block cipher can process data only in fixed size chunks, called
"blocks". Typical block sizes are 8 or 16 octets. To encrypt arbitrary
messages, you usually have to pad it to an integral number of blocks,
split it into blocks, and then process each block. The simplest way is
to process one block at a time, independent of each other. That mode of
operation is called "ECB", Electronic Code Book mode.  However, using
ECB is usually a bad idea. For a start, plaintext blocks that are equal
are transformed to ciphertext blocks that are equal; that leaks
information about the plaintext. Usually you should apply the cipher is
some feedback mode, "CBC" (Cipher Block Chaining) being one of the most
popular.

   A stream cipher can be used for messages of arbitrary length; a
typical stream cipher is a keyed pseudorandom generator. To encrypt a
plaintext message of N octets, you key the generator, generate N octets
of pseudorandom data, and XOR it with the plaintext. To decrypt,
regenerate the same stream using the key, XOR it to the ciphertext, and
the plaintext is recovered.

   *Caution:* The first rule for this kind of cipher is the same as for
a One Time Pad: _never_ ever use the same key twice.

   A common misconception is that encryption, by itself, implies
authentication. Say that you and a friend share a secret key, and you
receive an encrypted message, apply the key, and get a cleartext message
that makes sense to you. Can you then be sure that it really was your
friend that wrote the message you're reading? The anser is no. For
example, if you were using a block cipher in ECB mode, an attacker may
pick up the message on its way, and reorder, delete or repeat some of
the blocks. Even if the attacker can't decrypt the message, he can
change it so that you are not reading the same message as your friend
wrote. If you are using a block cipher in CBC mode rather than ECB, or
are using a stream cipher, the possibilities for this sort of attack are
different, but the attacker can still make predictable changes to the
message.

   It is recommended to _always_ use an authentication mechanism in
addition to encrypting the messages. Popular choices are Message
Authetication Codes like HMAC-SHA1, or digital signatures.

   Some ciphers have so called "weak keys", keys that results in
undesirable structure after the key setup processing, and should be
avoided. In Nettle, the presence of weak keys for a cipher mean that the
key setup function can fail, so you have to check its return value. In
addition, the context struct has a field `status', that is set to a
non-zero value if key setup fails. When possible, avoid algorithm that
have weak keys. There are several good ciphers that don't have any weak
keys.

AES
---

   AES is a quite new block cipher, specified by NIST as a replacement
for the older DES standard. It is the result of a competition between
cipher designers, and the winning design, constructed by Joan Daemen and
Vincent Rijnmen. Before it won the competition, it was known under the
name RIJNDAEL.

   Like all the AES candidates, the winning design uses a block size of
128 bits, or 16 octets, and variable keysize, 128, 192 and 256 bits
(16, 24 and 32 octets) being the allowed key sizes. It does not have
any weak keys. Nettle defines AES in `<nettle/aes.h>'.

 - Context struct: struct aes_ctx

 - Constant: AES_BLOCK_SIZE
     The AES blocksize, 16

 - Constant: AES_MIN_KEY_SIZE

 - Constant: AES_MAX_KEY_SIZE

 - Constant: AES_KEY_SIZE
     Default AES key size, 32

 - Function: void aes_set_key (struct aes_ctx *CTX, unsigned LENGTH,
          const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption.

 - Function: void aes_encrypt (struct aes_ctx *CTX, unsigned LENGTH,
          const uint8_t *DST, uint8_t *SRC)
     Encryption function. LENGTH must be an integral multiple of the
     block size. If it is more than one block, the data is processed in
     ECB mode. `src' and `dst' may be equal, but they must not overlap
     in any other way.

 - Function: void aes_decrypt (struct aes_ctx *CTX, unsigned LENGTH,
          const uint8_t *DST, uint8_t *SRC)
     Analogous to `aes_encrypt'

ARCFOUR
-------

   ARCFOUR is a stream cipher, also known under the trade marked name
RC4, and it is one of the fastest ciphers around. A problem is that the
key setup of ARCFOUR is quite weak, you should never use keys with
structure, keys that are ordinary passwords, or sequences of keys like
"secret:1", "secret:2", ..... If you have keys that don't look like
random bit strings, and you want to use ARCFOUR, always hash the key
before feeding it to ARCFOUR. For example

     /* A more robust key setup function for ARCFOUR */
     void
     my_arcfour_set_key(struct arcfour_ctx *ctx,
                        unsigned length, const uint8_t *key)
     {
       struct sha1_ctx hash;
       uint8_t digest[SHA1_DIGEST_SIZE];
     
       sha1_init(&hash);
       sha1_update(&hash, length, key);
       sha1_final(&hash);
       sha1_digest(&hash, SHA1_DIGEST_SIZE, digest);
     
       arcfour_set_key(ctx, SHA1_DIGEST_SIZE, digest);
     }

   Nettle defines ARCFOUR in `<nettle/arcfour.h>'.

 - Context struct: struct arcfour_ctx

 - Constant: ARCFOUR_BLOCK_SIZE
     The ARCFOUR blocksize, 16

 - Constant: ARCFOUR_MIN_KEY_SIZE
     Minimum key size, 1

 - Constant: ARCFOUR_MAX_KEY_SIZE
     Maximum key size, 256

 - Constant: ARCFOUR_KEY_SIZE
     Default ARCFOUR key size, 16

 - Function: void arcfour_set_key (struct arcfour_ctx *CTX, unsigned
          LENGTH, const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption.

 - Function: void arcfour_crypt (struct arcfour_ctx *CTX, unsigned
          LENGTH, const uint8_t *KEY)
     Encrypt some data. The same function is used for both encryption
     and decryption. Unlike the block ciphers, this function modifies
     the context, so you can split the data into arbitrary chunks and
     encrypt them one after another. The result is the same as if you
     had called `arcfour_crypt' only once with all the data.

CAST128
-------

   CAST-128 is a block cipher, specified in `RFC 2144'. It uses a 64
bit (8 octets) block size, and a variable key size of up to 128 bits.
Nettle defines cast128 in `<nettle/cast128.h>'.

 - Context struct: struct cast128_ctx

 - Constant: CAST128_BLOCK_SIZE
     The CAST128 blocksize, 8

 - Constant: CAST128_MIN_KEY_SIZE
     Minumim CAST128 key size, 5

 - Constant: CAST128_MAX_KEY_SIZE
     Maximum CAST128 key size, 16

 - Constant: CAST128_KEY_SIZE
     Default CAST128 key size, 16

 - Function: void cast128_set_key (struct cast128_ctx *CTX, unsigned
          LENGTH, const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption.

 - Function: void cast128_encrypt (struct cast128_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Encryption function. LENGTH must be an integral multiple of the
     block size. If it is more than one block, the data is processed in
     ECB mode. `src' and `dst' may be equal, but they must not overlap
     in any other way.

 - Function: void cast128_decrypt (struct cast128_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Analogous to `cast128_encrypt'

BLOWFISH
--------

   BLOWFISH is a block cipher designed by Bruce Schneier. It uses a
block size of 64 bits (8 octets), and a variable key size, up to 448
bits. It has some weak keys. Nettle defines BLOWFISH in
`<nettle/blowfish.h>'.

 - Context struct: struct blowfish_ctx

 - Constant: BLOWFISH_BLOCK_SIZE
     The BLOWFISH blocksize, 8

 - Constant: BLOWFISH_MIN_KEY_SIZE
     Minimum BLOWFISH key size, 8

 - Constant: BLOWFISH_MAX_KEY_SIZE
     Maximum BLOWFISH key size, 56

 - Constant: BLOWFISH_KEY_SIZE
     Default BLOWFISH key size, 16

 - Function: int blowfish_set_key (struct blowfish_ctx *CTX, unsigned
          LENGTH, const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption. Returns 1 on success, and 0 if the key
     was weak. Calling `blowfish_encrypt' or `blowfish_decrypt' with a
     weak key will crash with an assert violation.

 - Function: void blowfish_encrypt (struct blowfish_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Encryption function. LENGTH must be an integral multiple of the
     block size. If it is more than one block, the data is processed in
     ECB mode. `src' and `dst' may be equal, but they must not overlap
     in any other way.

 - Function: void blowfish_decrypt (struct blowfish_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Analogous to `blowfish_encrypt'

DES
---

   DES is the old Data Encryption Standard, specified by NIST. It uses a
block size of 64 bits (8 octets), and a key size of 56 bits. However,
the key bits are distributed over 8 octets, where the least significant
bit of each octet is used for parity. A common way to use DES is to
generate 8 random octets in some way, then set the least significant bit
of each octet to get odd parity, and initialize DES with the resulting
key.

   The key size of DES is so small that keys can be found by brute
force, using specialized hardware or lots of ordinary work stations in
parallell. One shouldn't be using plain DES at all today, if one uses
DES at all one should be using "triple DES", three DES ciphers piped
together, with three (or sometimes just two) independent keys.

   DES also has some weak keys. Nettle defines DES in `<nettle/des.h>'.

 - Context struct: struct des_ctx

 - Constant: DES_BLOCK_SIZE
     The DES blocksize, 8

 - Constant: DES_KEY_SIZE
     DES key size, 8

 - Function: int des_set_key (struct des_ctx *CTX, unsigned LENGTH,
          const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption. Returns 1 on success, and 0 if the key
     was weak or had bad parity. Calling `des_encrypt' or `des_decrypt'
     with a bad key will crash with an assert violation.

 - Function: void des_encrypt (struct des_ctx *CTX, unsigned LENGTH,
          const uint8_t *DST, uint8_t *SRC)
     Encryption function. LENGTH must be an integral multiple of the
     block size. If it is more than one block, the data is processed in
     ECB mode. `src' and `dst' may be equal, but they must not overlap
     in any other way.

 - Function: void des_decrypt (struct des_ctx *CTX, unsigned LENGTH,
          const uint8_t *DST, uint8_t *SRC)
     Analogous to `des_encrypt'

SERPENT
-------

   SERPENT is one of the AES finalists, designed by Ross Anderson, Eli
Biham and Lars Knudsen. Thus, the interface and properties are similar
to AES'. One pecularity is that it is quite pointless to use it with
anything but the maximum key size, smaller keys are just padded to
larger ones. Nettle defines SERPENT in `<nettle/serpent.h>'.

 - Context struct: struct serpent_ctx

 - Constant: SERPENT_BLOCK_SIZE
     The SERPENT blocksize, 16

 - Constant: SERPENT_MIN_KEY_SIZE
     Minumim SERPENT key size, 16

 - Constant: SERPENT_MAX_KEY_SIZE
     Maximum SERPENT key size, 32

 - Constant: SERPENT_KEY_SIZE
     Default SERPENT key size, 32

 - Function: void serpent_set_key (struct serpent_ctx *CTX, unsigned
          LENGTH, const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption.

 - Function: void serpent_encrypt (struct serpent_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Encryption function. LENGTH must be an integral multiple of the
     block size. If it is more than one block, the data is processed in
     ECB mode. `src' and `dst' may be equal, but they must not overlap
     in any other way.

 - Function: void serpent_decrypt (struct serpent_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Analogous to `serpent_encrypt'

TWOFISH
-------

   Another AES finalist, this one designed by Bruce Schneier and others.
Nettle defines it in `<nettle/twofish.h>'.

 - Context struct: struct twofish_ctx

 - Constant: TWOFISH_BLOCK_SIZE
     The TWOFISH blocksize, 16

 - Constant: TWOFISH_MIN_KEY_SIZE
     Minumim TWOFISH key size, 16

 - Constant: TWOFISH_MAX_KEY_SIZE
     Maximum TWOFISH key size, 32

 - Constant: TWOFISH_KEY_SIZE
     Default TWOFISH key size, 32

 - Function: void twofish_set_key (struct twofish_ctx *CTX, unsigned
          LENGTH, const uint8_t *KEY)
     Initialize the cipher. The same function is used for both
     encryption and decryption.

 - Function: void twofish_encrypt (struct twofish_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Encryption function. LENGTH must be an integral multiple of the
     block size. If it is more than one block, the data is processed in
     ECB mode. `src' and `dst' may be equal, but they must not overlap
     in any other way.

 - Function: void twofish_decrypt (struct twofish_ctx *CTX, unsigned
          LENGTH, const uint8_t *DST, uint8_t *SRC)
     Analogous to `twofish_encrypt'


File: nettle.info,  Node: Miscellaneous functions,  Prev: Cipher functions,  Up: Reference

Miscellaneous functions
=======================

 - Function: uint8_t * memxor (uint8_t *DST, const uint8_t *SRC, size_t
          N)
     XOR:s the source area on top of the destination area. The interface
     doesn't follow the Nettle conventions, because it is intended to be
     similar to the ANSI-C `memcpy' function.


File: nettle.info,  Node: Installation,  Next: Index,  Prev: Reference,  Up: Top

Installation
************

   Nettle uses `autoconf' and `automake'. To build it, unpack the
source and run

     ./configure
     make
     make check
     make install

   to install in the default location, `/usr/local'. The library is
installed in `/use/local/lib/libnettle.a' and the include files are
installed in `/use/local/include/nettle/'.

   Only static libraries are installed.


File: nettle.info,  Node: Index,  Prev: Installation,  Up: Top

Function and Concept Index
**************************

* Menu:

* aes_decrypt:                           Cipher functions.
* aes_encrypt:                           Cipher functions.
* aes_set_key:                           Cipher functions.
* arcfour_crypt:                         Cipher functions.
* arcfour_set_key:                       Cipher functions.
* blowfish_decrypt:                      Cipher functions.
* blowfish_encrypt:                      Cipher functions.
* blowfish_set_key:                      Cipher functions.
* cast128_decrypt:                       Cipher functions.
* cast128_encrypt:                       Cipher functions.
* cast128_set_key:                       Cipher functions.
* des_decrypt:                           Cipher functions.
* des_encrypt:                           Cipher functions.
* des_set_key:                           Cipher functions.
* md5_digest:                            Hash functions.
* md5_final:                             Hash functions.
* md5_init:                              Hash functions.
* md5_update:                            Hash functions.
* memxor:                                Miscellaneous functions.
* serpent_decrypt:                       Cipher functions.
* serpent_encrypt:                       Cipher functions.
* serpent_set_key:                       Cipher functions.
* sha1_digest:                           Hash functions.
* sha1_final:                            Hash functions.
* sha1_init:                             Hash functions.
* sha1_update:                           Hash functions.
* twofish_decrypt:                       Cipher functions.
* twofish_encrypt:                       Cipher functions.
* twofish_set_key:                       Cipher functions.



Tag Table:
Node: Top1130
Node: Introduction1608
Node: Copyright3013
Node: Conventions5019
Node: Example6759
Node: Reference8076
Node: Hash functions8333
Node: Cipher functions11858
Node: Miscellaneous functions26002
Node: Installation26423
Node: Index26899

End Tag Table
